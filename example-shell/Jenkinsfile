pipeline {
    
    agent any
    stages {
        stage('Clone repository') {               
            steps {
                checkout scm 
            }
        }
        stage ('Build & Push ') {
            environment {
                CF_IMAGE=credentials('CF_IMAGE')
            }
            steps {
                sh 'echo "Building $CF_IMAGE"'
                script {
                    def app
                    app = docker.build("${env.CF_IMAGE}")
                    // require credentials to be stored under DOCKERHUB
                    docker.withRegistry('https://registry.hub.docker.com', 'DOCKERHUB') {   
                            app.push("latest")        
                    }
                }
                sh '''
                    # test we have image in repository.
                    docker pull $CF_IMAGE
                    '''
            }
        }
        
        stage('report image') {
            environment {
                CF_IMAGE=credentials('CF_IMAGE')
                CF_HOST = credentials('CF_RT_HOST')
                CF_API_KEY = credentials('CF_API_KEY')
                CF_CONTAINER_REGISTRY_INTEGRATION= 'docker'
                CF_JIRA_INTEGRATION= 'jira'
                CF_JIRA_MESSAGE= '''
                        A message with embedded issue ( i.e. CR-11027 )
                        that would be use query jira for the ticket 
                        '''
                CF_JIRA_PROJECT_PREFIX = 'CR'
                CF_GITHUB_TOKEN = credentials('CF_GITHUB_TOKEN')
                CF_WORKFLOW_NAME="${env.JOB_NAME}"
                CF_WORKFLOW_URL="${env.BUILD_URL}"
            }
            steps {
                sh '''
                    # add git branch
                    export CF_GIT_PROVIDER="${CF_GIT_PROVIDER:-github}"
                    WITHOUT_POSTFIX="${GIT_URL%.*}"
                    export CF_GIT_REPO="${WITHOUT_POSTFIX#*//*/}"
                    # slice branch name from repo/branch
                    export CF_GIT_BRANCH="${GIT_BRANCH#*/}"
                    env | cut -f 1 -d "=" | grep -E "^CF_"  > cf_env
                    docker run --env-file=cf_env "quay.io/codefresh/codefresh-report-image:latest"
                '''
            }
        }
        
    }
}
