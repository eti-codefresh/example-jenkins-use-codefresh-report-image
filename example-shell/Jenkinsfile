pipeline {
    
    agent any
    stages {
        stage('Clone repository') {               
            steps {
                checkout scm 
            }
        }
//         stage ('Build & Push ') {
//             environment {
//                 CF_IMAGE=credentials('CF_IMAGE')
//             }
//             steps {
//                 sh 'echo "Building $CF_IMAGE"'
//                 script {
//                     def app
//                     app = docker.build("${env.CF_IMAGE}")
//                     // require credentials to be stored under DOCKERHUB
//                     docker.withRegistry('https://registry.hub.docker.com', 'DOCKERHUB') {   
//                             app.push("latest")        
//                     }
//                 }
//                 sh '''
//                     # test we have image in repository.
//                     docker pull $CF_IMAGE
//                     '''
//             }
//         }
        


stage('report image') {
    environment {
        // Name of runtime to implement the enrichment
        CF_HOST= 'https://mr-60c7443e37ca2730b9757992-e4c9118.cf-cd.com'

        // Codefresh API key !! Committing a plain text token is a security risk. We highly recommend using an encrypted secrets. !!
        // Documentation - https://www.jenkins.io/doc/book/using/using-credentials
        CF_API_KEY= '62dfffaf535bf608bd83cec2.2e6d481c04676ce15c0ec0df43bc5744'

        // Image path to enrich
        CF_IMAGE= 'quay.io/eti_zaguri/denis:10.0.0'

        // Name of Container registry integration
        CF_CONTAINER_REGISTRY_INTEGRATION= 'hosted-quay-new'

//         // The the git repository used for building the image
//         CF_GIT_REPO= ''

//         // The git integration type use (i.e. github)
//         CF_GIT_PROVIDER= ''

        // GitHub Access token !! Committing a plain text token is a security risk. We highly recommend using an encrypted secrets. !!
        // Documentation - https://www.jenkins.io/doc/book/using/using-credentials
        CF_GITHUB_TOKEN= credentials('CF_GITHUB_TOKEN')

//         // When explicit authentication used: For gitlab use, authenticate with a gitlab-token !! Committing a plain text token is a security risk. We highly recommend using an encrypted secrets. !!
//         // Documentation - https://www.jenkins.io/doc/book/using/using-credentials
//         CF_GITLAB_TOKEN= ''

//         // Bitbucket username
//         CF_BITBUCKET_USERNAME= ''

//         // Bitbucket password !! Committing a plain text token is a security risk. We highly recommend using an encrypted secrets. !!
//         // Documentation - https://www.jenkins.io/doc/book/using/using-credentials
//         CF_BITBUCKET_PASSWORD= ''

//         // Bitbucket server username
//         CF_BITBUCKET_USERNAME= ''

//         // Bitbucket server password !! Committing a plain text token is a security risk. We highly recommend using an encrypted secrets. !!
//         // Documentation - https://www.jenkins.io/doc/book/using/using-credentials
//         CF_BITBUCKET_PASSWORD= ''

//         // Bitbucket server host url
//         CF_BITBUCKET_HOST_URL= ''

        // Name of Jira integration
        CF_JIRA_INTEGRATION= 'eti-jira-new'

        // Jira project filter
        CF_JIRA_PROJECT_PREFIX= 'CR'

        // String starting with the issue ID to associate with image
        CF_JIRA_MESSAGE= 'my message'
//         CF_WORKFLOW_NAME="${env.JOB_NAME}"
//         CF_WORKFLOW_URL="${env.BUILD_URL}"

    }
    steps {
        sh '''
            echo env
//             echo env.JOB_NAME
//             export CF_WORKFLOW_NAME="${env.JOB_NAME}"
//             export CF_WORKFLOW_URL="${env.BUILD_URL}"
            # add git branch
            export CF_CI_TYPE="jenkins"
            export CF_GIT_PROVIDER="${CF_GIT_PROVIDER:-github}"
            WITHOUT_POSTFIX="${GIT_URL%.*}"
            export CF_GIT_REPO="${WITHOUT_POSTFIX#*//*/}"
            # slice branch name from repo/branch
            export CF_GIT_BRANCH="${GIT_BRANCH#*/}"
            env | cut -f 1 -d "=" | grep -E "^CF_"  > cf_env
            docker run --env-file=cf_env "quay.io/codefresh/codefresh-report-image:latest"
        '''
        }
    }

        
    }
}
